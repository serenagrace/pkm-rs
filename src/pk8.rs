use crate::impl_read_prop;
use crate::pkx::Pkx;
use crate::poke_crypto::PokeCrypto;
use crate::reader::Reader;
use crate::strings::string_converter8;
use crate::types;
use alloc::string::String;

pub struct Pk8 {
    data: [u8; Self::STORED_SIZE],
}

impl Default for Pk8 {
    fn default() -> Self {
        Self {
            data: [0; Self::STORED_SIZE],
        }
    }
}

impl Reader for Pk8 {
    fn as_slice(&self) -> &[u8] {
        &self.data
    }
}

impl PokeCrypto for Pk8 {
    const PARTY_SIZE: usize = 0x158;
    const STORED_SIZE: usize = 0x148;
    const BLOCK_SIZE: usize = 0x50;

    fn is_encrypted(data: &[u8]) -> bool {
        data.read::<u16>(0x70) != 0 || data.read::<u16>(0x110) != 0
    }

    fn checksum(&self) -> u16 {
        self.read(0x06)
    }
}

impl Pk8 {
    pub fn new(mut data: [u8; Self::STORED_SIZE]) -> Self {
        Self::decrypt_raw(&mut data);
        Self { data }
    }

    pub fn new_valid(data: [u8; Self::STORED_SIZE]) -> Self {
        let pkm = Self::new(data);
        if pkm.is_valid() {
            return pkm;
        }

        Self::default()
    }

    impl_read_prop!(minted_nature: u8 = 0x21);

    pub fn minted_nature_t(&self) -> types::Nature {
        self.minted_nature().into()
    }
}

impl Pkx for Pk8 {
    impl_read_prop!(encryption_constant: u32 = 0x00);
    impl_read_prop!(sanity: u16 = 0x04);
    impl_read_prop!(species: u16 = 0x08);
    impl_read_prop!(held_item: u16 = 0x0a);
    impl_read_prop!(tid16: u16 = 0x0c);
    impl_read_prop!(sid16: u16 = 0x0e);
    impl_read_prop!(exp: u32 = 0x10);
    impl_read_prop!(ability: u16 = 0x14);
    impl_read_prop!(ability_number: u8 = 0x16);
    impl_read_prop!(pid: u32 = 0x1c);
    impl_read_prop!(nature: u8 = 0x20);
    impl_read_prop!(form: u8 = 0x24);
    impl_read_prop!(ev_hp: u8 = 0x26);
    impl_read_prop!(ev_atk: u8 = 0x27);
    impl_read_prop!(ev_def: u8 = 0x28);
    impl_read_prop!(ev_spe: u8 = 0x29);
    impl_read_prop!(ev_spa: u8 = 0x2a);
    impl_read_prop!(ev_spd: u8 = 0x2b);
    impl_read_prop!(move1: u16 = 0x72);
    impl_read_prop!(move2: u16 = 0x74);
    impl_read_prop!(move3: u16 = 0x76);
    impl_read_prop!(move4: u16 = 0x78);
    impl_read_prop!(move1_pp: u8 = 0x7a);
    impl_read_prop!(move2_pp: u8 = 0x7b);
    impl_read_prop!(move3_pp: u8 = 0x7c);
    impl_read_prop!(move4_pp: u8 = 0x7d);
    impl_read_prop!(move1_pp_ups: u8 = 0x7e);
    impl_read_prop!(move2_pp_ups: u8 = 0x7f);
    impl_read_prop!(move3_pp_ups: u8 = 0x80);
    impl_read_prop!(move4_pp_ups: u8 = 0x81);
    impl_read_prop!(stat_hp_current: u16 = 0x8a);
    impl_read_prop!(iv32: u32 = 0x8c);
    impl_read_prop!(status_condition: u32 = 0x94);
    impl_read_prop!(current_handler: u8 = 0xc4);
    impl_read_prop!(ht_friendship: u8 = 0xc8);
    impl_read_prop!(language: u8 = 0xe2);
    impl_read_prop!(ot_friendship: u8 = 0x112);
    impl_read_prop!(ball: u8 = 0x124);
    // impl_read_prop!(stat_level: u8 = 0x148);
    // impl_read_prop!(stat_hp_max: u16 = 0x14a);
    // impl_read_prop!(stat_atk: u16 = 0x14c);
    // impl_read_prop!(stat_def: u16 = 0x14e);
    // impl_read_prop!(stat_spe: u16 = 0x150);
    // impl_read_prop!(stat_spa: u16 = 0x152);
    // impl_read_prop!(stat_spd: u16 = 0x154);

    fn nickname(&self) -> String {
        string_converter8::get_string(&self.data[0x58..][..26])
    }

    fn ht_name(&self) -> String {
        string_converter8::get_string(&self.data[0xa8..][..26])
    }

    fn ot_name(&self) -> String {
        string_converter8::get_string(&self.data[0xf8..][..26])
    }

    fn current_friendship(&self) -> u8 {
        if self.current_handler() == 0 {
            return self.ot_friendship();
        }
        self.ht_friendship()
    }

    fn is_egg(&self) -> bool {
        (self.iv32() >> 30) & 1 == 1
    }

    fn is_nicknamed(&self) -> bool {
        (self.iv32() >> 31) & 1 == 1
    }

    fn ot_gender(&self) -> u8 {
        self.read::<u8>(0x125) >> 7
    }

    fn met_level(&self) -> u8 {
        self.read::<u8>(0x125) & !0x80
    }

    fn gender(&self) -> u8 {
        let byte = self.read::<u8>(0x22);
        (byte >> 2) & 3
    }

    fn valid_checksum(&self) -> bool {
        self.checksum() == self.calculate_checksum()
    }
}

#[cfg(test)]
mod test {
    use super::Pk8 as Pkm;
    use super::*;
    use crate::impl_test;

    const TEST_EKX: [u8; Pkm::STORED_SIZE] = [
        0x9f, 0xde, 0xe5, 0x6e, 0x00, 0x00, 0x64, 0xb7, 0xae, 0xcf, 0x50, 0x0c, 0x17, 0xbe, 0x1f,
        0xa2, 0xa4, 0x98, 0xae, 0x3c, 0x5b, 0xbd, 0xac, 0xb0, 0x30, 0xce, 0x53, 0x7a, 0x1c, 0xbf,
        0x30, 0xb0, 0x0a, 0x14, 0x5c, 0x73, 0xcf, 0x48, 0x1d, 0x90, 0x80, 0x0d, 0x39, 0x8d, 0xdd,
        0xcb, 0x8c, 0x05, 0xba, 0x5e, 0xa0, 0x26, 0x82, 0x12, 0x50, 0x60, 0x45, 0x7e, 0xc5, 0x04,
        0xf7, 0x96, 0x65, 0x9d, 0xce, 0x1a, 0xc5, 0x5f, 0xd3, 0x28, 0xf5, 0x49, 0xd2, 0x19, 0x6d,
        0x42, 0xae, 0x84, 0x4b, 0x0d, 0xa5, 0x6e, 0x11, 0x31, 0x07, 0xc2, 0xcb, 0xe9, 0x39, 0x5b,
        0xae, 0x4b, 0x0a, 0xbb, 0xa1, 0x8c, 0x09, 0xc9, 0x53, 0x60, 0xa7, 0xd4, 0x45, 0x3f, 0x40,
        0xd3, 0x6f, 0x9d, 0x2c, 0xc4, 0xe9, 0x4a, 0x6c, 0xb7, 0xe2, 0xe1, 0x33, 0x41, 0x17, 0xea,
        0x7c, 0xbc, 0xb3, 0xd2, 0x21, 0xa2, 0xf7, 0x14, 0xef, 0xc6, 0x13, 0x1f, 0x76, 0x86, 0xba,
        0xbb, 0x3f, 0xac, 0x2e, 0xfb, 0xa6, 0x24, 0xec, 0x64, 0x5a, 0x7c, 0xff, 0x19, 0x2d, 0x11,
        0xfa, 0x90, 0x87, 0x4f, 0xcb, 0x17, 0x45, 0xd7, 0x27, 0x31, 0xdf, 0x56, 0x1d, 0x4e, 0xf8,
        0x0d, 0xe0, 0x84, 0x93, 0x37, 0x38, 0xf3, 0x49, 0x20, 0xb9, 0x39, 0x4f, 0xee, 0xe6, 0x6f,
        0x86, 0xd4, 0x25, 0x6d, 0x72, 0xac, 0xaf, 0x20, 0xf6, 0x3a, 0x38, 0x7b, 0xda, 0xe9, 0x43,
        0xf6, 0x98, 0xe1, 0x1c, 0xa9, 0xab, 0xaf, 0x47, 0xa9, 0xb9, 0x98, 0x3b, 0xad, 0x0b, 0x8d,
        0x1f, 0x75, 0x56, 0x5b, 0x1f, 0x40, 0x52, 0xe2, 0x4b, 0x8e, 0xbf, 0x43, 0x98, 0xed, 0xcb,
        0xa8, 0xc5, 0xc7, 0xef, 0x2d, 0x28, 0x50, 0xbb, 0x9c, 0xba, 0x1b, 0x32, 0xc4, 0xd5, 0x6a,
        0x26, 0x96, 0x7f, 0x0b, 0x0e, 0xb2, 0x3f, 0xcc, 0xef, 0x08, 0x8d, 0x0a, 0x29, 0x21, 0x91,
        0xce, 0x80, 0x0e, 0x0c, 0x6a, 0xc6, 0xe5, 0x03, 0x8b, 0x3b, 0x4e, 0x55, 0x74, 0x3d, 0xfa,
        0xce, 0x4c, 0x01, 0xb0, 0x29, 0xb2, 0x59, 0x35, 0xee, 0xa7, 0x99, 0xcf, 0x83, 0x93, 0xce,
        0x5e, 0x80, 0x66, 0x6d, 0x6f, 0xf1, 0xcb, 0x36, 0xdc, 0xe9, 0x23, 0x27, 0x76, 0x1e, 0x58,
        0xfa, 0x03, 0x34, 0x04, 0xb3, 0xb7, 0x47, 0xdf, 0x7a, 0x9e, 0xab, 0xff, 0xe4, 0x0e, 0x28,
        0xc9, 0x73, 0x8d, 0x14, 0xda, 0x30, 0x8b, 0x0a, 0x73, 0x83, 0xa2, 0x58, 0x6e,
    ];

    const TEST_PKX: [u8; Pkm::STORED_SIZE] = [
        0x9F, 0xDE, 0xE5, 0x6E, 0x00, 0x00, 0x64, 0xB7, 0xC6, 0x02, 0x00, 0x00, 0xB9, 0x88, 0x8D,
        0x49, 0xB8, 0x0A, 0x00, 0x00, 0x77, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28,
        0x35, 0x69, 0x01, 0x01, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00,
        0x75, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x6B, 0x00, 0x61, 0x00, 0x62, 0x00, 0x6F, 0x00, 0x6F,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x01, 0xA9, 0x01, 0x6D, 0x00,
        0x4B, 0x00, 0x0F, 0x1E, 0x0A, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x29, 0x00, 0x91, 0x34, 0xDE, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00,
        0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x4B, 0x00, 0x48, 0x00, 0x65,
        0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x32, 0x06, 0x53, 0x00, 0xCA, 0x02, 0x0B, 0x00, 0x00, 0x00, 0x13,
        0x0B, 0x0F, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];

    mod is_encrypted {
        use super::*;

        #[test]
        fn encrypted() {
            assert_eq!(Pkm::is_encrypted(&TEST_EKX), true)
        }

        #[test]
        fn decrypted() {
            assert_eq!(Pkm::is_encrypted(&TEST_PKX), false)
        }
    }

    #[test]
    fn should_decrypt() {
        let mut ekx = TEST_EKX.clone();
        Pkm::decrypt_raw(&mut ekx);
        assert_eq!(ekx, TEST_PKX);
    }

    #[test]
    fn should_encrypt() {
        let mut pkx = TEST_PKX.clone();
        Pkm::encrypt_raw(&mut pkx);
        assert_eq!(pkx, TEST_EKX);
    }

    impl_test!(held_item, 0x0);
    impl_test!(form, 2);
    impl_test!(is_nicknamed, false);
    impl_test!(exp, 2744);
    impl_test!(tid16, 35001);
    impl_test!(sid16, 18829);
    impl_test!(ot_gender_t, types::Gender::Male);
    impl_test!(ball, 4);
    impl_test!(met_level, 14);
    impl_test!(species_t, types::Species::Pumpkaboo);
    impl_test!(pid, 0x69352800);
    impl_test!(tsv, 3091);
    impl_test!(psv, 1043);
    impl_test!(nature_t, types::Nature::Lonely);
    impl_test!(minted_nature_t, types::Nature::Lonely);
    impl_test!(ability_t, types::Ability::Frisk);
    impl_test!(ability_number_t, types::AbilityNumber::Second);

    impl_test!(hidden_power_t, types::HiddenPower::Bug);
    impl_test!(language_t, types::Language::English);
    impl_test!(gender_t, types::Gender::Female);
    impl_test!(move1_t, types::Move::Astonish);
    impl_test!(move2_t, types::Move::ShadowSneak);
    impl_test!(move3_t, types::Move::ConfuseRay);
    impl_test!(move4_t, types::Move::RazorLeaf);
    impl_test!(move1_pp, 15);
    impl_test!(move2_pp, 30);
    impl_test!(move3_pp, 10);
    impl_test!(move4_pp, 25);
    impl_test!(move1_pp_ups, 0);
    impl_test!(move2_pp_ups, 0);
    impl_test!(move3_pp_ups, 0);
    impl_test!(move4_pp_ups, 0);
    impl_test!(iv_hp, 17);
    impl_test!(iv_atk, 4);
    impl_test!(iv_def, 13);
    impl_test!(iv_spa, 29);
    impl_test!(iv_spd, 20);
    impl_test!(iv_spe, 28);
    impl_test!(ev_hp, 0);
    impl_test!(ev_atk, 0);
    impl_test!(ev_def, 0);
    impl_test!(ev_spa, 0);
    impl_test!(ev_spd, 0);
    impl_test!(ev_spe, 0);
    impl_test!(ot_friendship, 50);
    impl_test!(ht_friendship, 0);
    impl_test!(is_egg, false);
    impl_test!(current_handler, 0);
    impl_test!(current_friendship, 50);
    impl_test!(sanity, 0);
    impl_test!(checksum, 0xb764);
    impl_test!(calculate_checksum, 0xb764);
    impl_test!(is_valid, true);
    impl_test!(is_shiny, false);
    impl_test!(shiny_type, None);
    impl_test!(nickname, "Pumpkaboo");
    impl_test!(ot_name, "PKHeX");
    impl_test!(ht_name, "");
    impl_test!(status_condition, 0);
    // impl_test!(stat_level, 0);
    // impl_test!(stat_hp_max, 0);
    // impl_test!(stat_atk, 0);
    // impl_test!(stat_def, 0);
    // impl_test!(stat_spe, 0);
    // impl_test!(stat_spa, 0);
    // impl_test!(stat_spd, 0);
    // impl_test!(stat_hp_current, 300);

    #[test]
    fn should_return_not_shiny_for_default() {
        let pkx = Pkm::default();
        assert_eq!(pkx.is_shiny(), false)
    }
}
