use crate::impl_read_prop;
use crate::pkx::Pkx;
use crate::poke_crypto::PokeCrypto;
use crate::reader::Reader;
use crate::strings::string_converter8;
use alloc::string::String;

pub struct Pa8 {
    data: [u8; Self::STORED_SIZE],
}

impl Default for Pa8 {
    fn default() -> Self {
        Self {
            data: [0; Self::STORED_SIZE],
        }
    }
}

impl Reader for Pa8 {
    fn as_slice(&self) -> &[u8] {
        &self.data
    }
}

impl PokeCrypto for Pa8 {
    const PARTY_SIZE: usize = 0x178;
    const STORED_SIZE: usize = 0x168;
    const BLOCK_SIZE: usize = 0x58;

    fn is_encrypted(data: &[u8]) -> bool {
        data.read::<u16>(0x78) != 0 || data.read::<u16>(0x128) != 0
    }

    fn checksum(&self) -> u16 {
        self.read(0x06)
    }
}

impl Pa8 {
    pub fn new(mut data: [u8; Self::STORED_SIZE]) -> Self {
        Self::decrypt_raw(&mut data);
        Self { data }
    }

    pub fn new_valid(data: [u8; Self::STORED_SIZE]) -> Self {
        let pkm = Self::new(data);
        if pkm.is_valid() {
            return pkm;
        }

        Self::default()
    }
}

impl Pkx for Pa8 {
    impl_read_prop!(encryption_constant: u32 = 0x00);
    impl_read_prop!(sanity: u16 = 0x04);
    impl_read_prop!(species: u16 = 0x08);
    impl_read_prop!(held_item: u16 = 0x0a);
    impl_read_prop!(tid16: u16 = 0x0c);
    impl_read_prop!(sid16: u16 = 0x0e);
    impl_read_prop!(exp: u32 = 0x10);
    impl_read_prop!(ability: u16 = 0x14);
    impl_read_prop!(ability_number: u8 = 0x16);
    impl_read_prop!(pid: u32 = 0x1c);
    impl_read_prop!(nature: u8 = 0x20);
    impl_read_prop!(form: u8 = 0x24);
    impl_read_prop!(ev_hp: u8 = 0x26);
    impl_read_prop!(ev_atk: u8 = 0x27);
    impl_read_prop!(ev_def: u8 = 0x28);
    impl_read_prop!(ev_spe: u8 = 0x29);
    impl_read_prop!(ev_spa: u8 = 0x2a);
    impl_read_prop!(ev_spd: u8 = 0x2b);
    impl_read_prop!(move1: u16 = 0x54);
    impl_read_prop!(move2: u16 = 0x56);
    impl_read_prop!(move3: u16 = 0x58);
    impl_read_prop!(move4: u16 = 0x5a);
    impl_read_prop!(move1_pp: u8 = 0x5c);
    impl_read_prop!(move2_pp: u8 = 0x5d);
    impl_read_prop!(move3_pp: u8 = 0x5e);
    impl_read_prop!(move4_pp: u8 = 0x5f);
    impl_read_prop!(move1_pp_ups: u8 = 0x86);
    impl_read_prop!(move2_pp_ups: u8 = 0x87);
    impl_read_prop!(move3_pp_ups: u8 = 0x88);
    impl_read_prop!(move4_pp_ups: u8 = 0x89);
    impl_read_prop!(stat_hp_current: u16 = 0x92);
    impl_read_prop!(iv32: u32 = 0x94);
    impl_read_prop!(status_condition: u32 = 0x9c);
    impl_read_prop!(current_handler: u8 = 0xd4);
    impl_read_prop!(ht_friendship: u8 = 0xd8);
    impl_read_prop!(language: u8 = 0xf2);
    impl_read_prop!(ot_friendship: u8 = 0x11a);
    impl_read_prop!(ball: u8 = 0x137);
    // impl_read_prop!(stat_level: u8 = 0x168);
    // impl_read_prop!(stat_hp_max: u16 = 0x16a);
    // impl_read_prop!(stat_atk: u16 = 0x16c);
    // impl_read_prop!(stat_def: u16 = 0x16e);
    // impl_read_prop!(stat_spe: u16 = 0x170);
    // impl_read_prop!(stat_spa: u16 = 0x172);
    // impl_read_prop!(stat_spd: u16 = 0x174);

    fn nickname(&self) -> String {
        string_converter8::get_string(&self.data[0x60..][..26])
    }

    fn ht_name(&self) -> String {
        string_converter8::get_string(&self.data[0xb8..][..26])
    }

    fn ot_name(&self) -> String {
        string_converter8::get_string(&self.data[0x110..][..26])
    }

    fn current_friendship(&self) -> u8 {
        if self.current_handler() == 0 {
            return self.ot_friendship();
        }
        self.ht_friendship()
    }

    fn is_egg(&self) -> bool {
        (self.iv32() >> 30) & 1 == 1
    }

    fn is_nicknamed(&self) -> bool {
        (self.iv32() >> 31) & 1 == 1
    }

    fn ot_gender(&self) -> u8 {
        self.read::<u8>(0x13D) >> 7
    }

    fn gender(&self) -> u8 {
        let byte = self.read::<u8>(0x22);
        (byte >> 2) & 3
    }

    fn met_level(&self) -> u8 {
        self.read::<u8>(0x13D) & !0x80
    }

    fn valid_checksum(&self) -> bool {
        self.checksum() == self.calculate_checksum()
    }
}

#[cfg(test)]
mod test {
    use super::Pa8 as Pkm;
    use super::*;
    use crate::impl_test;
    use crate::types;

    const TEST_EKX: [u8; Pkm::STORED_SIZE] = [
        0x8d, 0x74, 0xa8, 0x50, 0x00, 0x00, 0x4a, 0x04, 0x63, 0x9d, 0xed, 0xef, 0x45, 0xff, 0x8d,
        0xb9, 0xda, 0xf2, 0x6d, 0xf6, 0x2d, 0x61, 0xd3, 0x2b, 0x47, 0x08, 0x8b, 0x56, 0xac, 0x0b,
        0x33, 0x94, 0x04, 0xe1, 0xd0, 0xd1, 0x49, 0x8c, 0x80, 0xf4, 0x0a, 0x81, 0x3d, 0xd8, 0xe1,
        0x5a, 0x7c, 0x98, 0x42, 0x69, 0x12, 0x1e, 0x31, 0xdd, 0xda, 0x67, 0xa0, 0xb2, 0xec, 0xba,
        0xc5, 0x26, 0xa6, 0x9d, 0x30, 0x71, 0x15, 0x26, 0x6e, 0x51, 0x7d, 0x6b, 0x79, 0xd9, 0x17,
        0xa4, 0x45, 0x3d, 0x3c, 0xf3, 0x40, 0xe3, 0xf4, 0xf9, 0xff, 0x4c, 0xa6, 0x27, 0xc5, 0x0b,
        0x4e, 0x77, 0x38, 0xb6, 0x25, 0xca, 0x9c, 0x4b, 0x93, 0xb3, 0x66, 0x9e, 0x54, 0xf3, 0xa8,
        0x12, 0xb8, 0x84, 0x1f, 0xac, 0x46, 0xe4, 0xaa, 0x81, 0xfa, 0x10, 0xcb, 0x93, 0x86, 0x0b,
        0x52, 0xd1, 0x8f, 0x07, 0x88, 0xe1, 0x4b, 0x76, 0x8f, 0x5d, 0xf9, 0x56, 0xd9, 0x1e, 0xfb,
        0x20, 0xe8, 0x3e, 0x9e, 0xf4, 0xa9, 0xe4, 0xde, 0xda, 0x2c, 0x16, 0x98, 0x89, 0x90, 0x09,
        0x3b, 0xb1, 0x4e, 0xee, 0xc8, 0x18, 0x54, 0x70, 0xc8, 0x14, 0x76, 0x58, 0x33, 0xf2, 0xb1,
        0x3a, 0xa5, 0x30, 0xcb, 0x26, 0x86, 0x87, 0x5c, 0x64, 0x89, 0x21, 0x4f, 0x68, 0xf9, 0xf5,
        0x45, 0x0a, 0x78, 0x06, 0xdb, 0x8c, 0x17, 0x59, 0x54, 0xe2, 0xb6, 0x1b, 0x15, 0xd0, 0x6e,
        0x3c, 0x16, 0xa6, 0xc9, 0x55, 0x20, 0x59, 0x6b, 0xba, 0xf1, 0x78, 0x0d, 0x2e, 0xf4, 0xa2,
        0xdb, 0x25, 0x34, 0x86, 0xc9, 0x98, 0xfd, 0x23, 0xe4, 0x48, 0xad, 0x60, 0xd0, 0x48, 0xda,
        0x4a, 0x0f, 0x92, 0x72, 0xe1, 0x1b, 0x0b, 0xfa, 0x3a, 0x8c, 0xc3, 0x60, 0xd0, 0x6f, 0xf1,
        0x3a, 0xeb, 0x76, 0xf6, 0xe7, 0x91, 0x5a, 0xe4, 0xd3, 0x8a, 0x3d, 0x08, 0x49, 0x46, 0x67,
        0x2c, 0x73, 0x50, 0xda, 0xc4, 0x6e, 0x19, 0x91, 0x62, 0xa8, 0x17, 0x65, 0x62, 0xe3, 0x08,
        0xf2, 0x27, 0xdf, 0x70, 0x99, 0x21, 0x47, 0xf6, 0xa0, 0xa4, 0x0a, 0x05, 0x86, 0x29, 0x1f,
        0x99, 0x7a, 0x02, 0x97, 0x7b, 0xa6, 0xeb, 0xf1, 0x16, 0x5e, 0x55, 0xbd, 0x30, 0xb4, 0xaf,
        0xf3, 0x40, 0x1e, 0xa9, 0x73, 0x7c, 0xd9, 0x0f, 0xf9, 0xbf, 0xd2, 0x24, 0xb1, 0x56, 0x1a,
        0x80, 0xd7, 0xaf, 0x2f, 0x7a, 0x08, 0x89, 0xec, 0x32, 0x00, 0x84, 0x65, 0x06, 0x09, 0xce,
        0x75, 0xed, 0x49, 0xa7, 0xb6, 0xb7, 0xe7, 0x82, 0x0a, 0xa5, 0xaa, 0xd0, 0xa3, 0x8e, 0x5b,
        0xcf, 0x97, 0xf0, 0xd3, 0x2e, 0x72, 0x8b, 0x9e, 0x42, 0xd9, 0xe9, 0x77, 0xc3, 0x16, 0x56,
    ];

    const TEST_PKX: [u8; Pkm::STORED_SIZE] = [
        0x8D, 0x74, 0xA8, 0x50, 0x00, 0x00, 0x4A, 0x04, 0x29, 0x00, 0x00, 0x00, 0xB9, 0x88, 0x8D,
        0x49, 0x00, 0x10, 0x00, 0x00, 0x27, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x57,
        0xC6, 0xA4, 0x0E, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x89, 0x66, 0x00, 0x10, 0x00, 0x5F, 0x00, 0x2C, 0x00,
        0x00, 0x00, 0x19, 0x14, 0x12, 0x00, 0x5A, 0x00, 0x75, 0x00, 0x62, 0x00, 0x61, 0x00, 0x74,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x27, 0xEB,
        0x9C, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9A, 0x99, 0x99, 0x42, 0x59, 0x25, 0x92, 0x42,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x00,
        0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x50, 0x00, 0x4B, 0x00, 0x48, 0x00, 0x65, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x02, 0x01, 0x1C, 0x00, 0x00, 0x19,
        0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];

    mod is_encrypted {
        use super::*;

        #[test]
        fn encrypted() {
            assert_eq!(Pkm::is_encrypted(&TEST_EKX), true)
        }

        #[test]
        fn decrypted() {
            assert_eq!(Pkm::is_encrypted(&TEST_PKX), false)
        }
    }

    #[test]
    fn should_decrypt() {
        let mut ekx = TEST_EKX.clone();
        Pkm::decrypt_raw(&mut ekx);
        assert_eq!(ekx, TEST_PKX);
    }

    #[test]
    fn should_encrypt() {
        let mut pkx = TEST_PKX.clone();
        Pkm::encrypt_raw(&mut pkx);
        assert_eq!(pkx, TEST_EKX);
    }

    impl_test!(held_item, 0);
    impl_test!(form, 0);
    impl_test!(is_nicknamed, false);
    impl_test!(exp, 4096);
    impl_test!(tid16, 35001);
    impl_test!(sid16, 18829);
    impl_test!(ot_gender_t, types::Gender::Male);
    impl_test!(ball, 28);
    impl_test!(met_level, 16);
    impl_test!(species_t, types::Species::Zubat);
    impl_test!(pid, 0xa4c657f0);
    impl_test!(tsv, 3091);
    impl_test!(psv, 3891);
    impl_test!(nature_t, types::Nature::Naive);
    impl_test!(ability_t, types::Ability::InnerFocus);
    impl_test!(ability_number_t, types::AbilityNumber::First);
    impl_test!(hidden_power_t, types::HiddenPower::Ghost);
    impl_test!(language_t, types::Language::English);
    impl_test!(gender_t, types::Gender::Male);
    impl_test!(move1_t, types::Move::Gust);
    impl_test!(move2_t, types::Move::Hypnosis);
    impl_test!(move3_t, types::Move::Bite);
    impl_test!(move4_t, types::Move::None);
    impl_test!(move1_pp, 25);
    impl_test!(move2_pp, 20);
    impl_test!(move3_pp, 18);
    impl_test!(move4_pp, 0);
    impl_test!(move1_pp_ups, 0);
    impl_test!(move2_pp_ups, 0);
    impl_test!(move3_pp_ups, 0);
    impl_test!(move4_pp_ups, 0);
    impl_test!(iv_hp, 7);
    impl_test!(iv_atk, 25);
    impl_test!(iv_def, 26);
    impl_test!(iv_spa, 25);
    impl_test!(iv_spd, 10);
    impl_test!(iv_spe, 25);
    impl_test!(ev_hp, 0);
    impl_test!(ev_atk, 0);
    impl_test!(ev_def, 0);
    impl_test!(ev_spa, 0);
    impl_test!(ev_spd, 0);
    impl_test!(ev_spe, 0);
    impl_test!(ot_friendship, 0);
    impl_test!(ht_friendship, 0);
    impl_test!(is_egg, false);
    impl_test!(current_handler, 0);
    impl_test!(current_friendship, 0);
    impl_test!(sanity, 0);
    impl_test!(checksum, 0x44a);
    impl_test!(calculate_checksum, 0x44a);
    impl_test!(is_valid, true);
    impl_test!(is_shiny, false);
    impl_test!(shiny_type, None);
    impl_test!(nickname, "Zubat");
    impl_test!(ot_name, "PKHeX");
    impl_test!(ht_name, "");
    impl_test!(status_condition, 0);
    // impl_test!(stat_level, 0);
    // impl_test!(stat_hp_max, 0);
    // impl_test!(stat_atk, 0);
    // impl_test!(stat_def, 0);
    // impl_test!(stat_spe, 0);
    // impl_test!(stat_spa, 0);
    // impl_test!(stat_spd, 0);
    // impl_test!(stat_hp_current, 56);

    #[test]
    fn should_return_not_shiny_for_default() {
        let pkx = Pkm::default();
        assert_eq!(pkx.is_shiny(), false)
    }

    #[test]
    fn should_read_is_shiny_true() {
        let shiny_ekx = [
            0x40, 0xea, 0xe2, 0x40, 0x00, 0x00, 0x81, 0x07, 0x7d, 0x31, 0xfb, 0xc3, 0x27, 0x38,
            0x78, 0x10, 0x76, 0xe8, 0x1e, 0x2c, 0x66, 0xc5, 0x69, 0x68, 0xf2, 0x15, 0x9f, 0x59,
            0xe2, 0xe7, 0xe0, 0x6c, 0x0b, 0x14, 0x93, 0x4f, 0x4d, 0x6a, 0x39, 0x65, 0xbd, 0x08,
            0x62, 0x3b, 0xe3, 0x20, 0xe4, 0x5c, 0xfd, 0xde, 0xc0, 0x99, 0x9a, 0x14, 0x8f, 0xee,
            0x0f, 0xbd, 0xfe, 0x30, 0x97, 0xb1, 0x83, 0x9d, 0x18, 0x8c, 0xc6, 0xe2, 0xe4, 0x2e,
            0x4e, 0x61, 0xf2, 0x64, 0x71, 0x9a, 0x60, 0xf5, 0xa2, 0x47, 0x3f, 0xf6, 0x86, 0xdb,
            0xf6, 0x67, 0x7d, 0x50, 0xc0, 0x37, 0x80, 0xb4, 0x11, 0xff, 0x89, 0xe8, 0xe6, 0xfe,
            0xd4, 0x19, 0x4e, 0x41, 0xc4, 0xa5, 0xa9, 0x48, 0x32, 0xed, 0x73, 0x93, 0x63, 0x2a,
            0x99, 0x4c, 0x0a, 0x35, 0xa0, 0x13, 0xf3, 0x51, 0x32, 0xad, 0x51, 0x48, 0xc4, 0xf3,
            0xc1, 0x0c, 0x73, 0x59, 0x84, 0xf2, 0x51, 0x07, 0x7c, 0x8d, 0xb0, 0xf3, 0xec, 0xd3,
            0x33, 0x78, 0x17, 0xad, 0xa7, 0xd1, 0x24, 0x82, 0xfd, 0xd6, 0xf4, 0xa8, 0xd1, 0xe9,
            0xd5, 0x2c, 0x65, 0xfa, 0x3e, 0x9f, 0x04, 0x41, 0xce, 0xca, 0xf2, 0x61, 0x95, 0x6d,
            0x14, 0xb3, 0x2a, 0x13, 0xf3, 0x0f, 0xf0, 0xd5, 0x48, 0x16, 0xed, 0xc6, 0xb2, 0x0e,
            0xbf, 0x0d, 0x4c, 0x2f, 0xbe, 0x0e, 0xe9, 0x14, 0x4f, 0x1b, 0xfb, 0xe7, 0xec, 0xf0,
            0x75, 0xfd, 0x73, 0xa5, 0x22, 0xb1, 0xb3, 0x23, 0x48, 0x06, 0x5f, 0x19, 0x97, 0x1c,
            0xbe, 0xbf, 0xa4, 0x0a, 0xd6, 0x4a, 0x8f, 0x04, 0xed, 0x96, 0x86, 0x2c, 0x87, 0xf2,
            0x31, 0xd4, 0x57, 0x33, 0x5f, 0xa1, 0xb4, 0xae, 0x66, 0xc5, 0x92, 0xc2, 0xca, 0x65,
            0x1e, 0x42, 0xf2, 0x27, 0x31, 0x71, 0xf8, 0x5d, 0xfa, 0x4c, 0xc8, 0x05, 0x8d, 0xfa,
            0xaf, 0x61, 0xb6, 0x9c, 0x99, 0xb8, 0xc8, 0x70, 0x76, 0x80, 0x3b, 0x2d, 0xad, 0x44,
            0x0e, 0x81, 0x49, 0xd9, 0x01, 0x49, 0x69, 0x8d, 0x1e, 0xb8, 0xbe, 0xca, 0x5c, 0x03,
            0x2e, 0xb2, 0x08, 0x8b, 0x6d, 0x5c, 0xec, 0xa7, 0x70, 0x40, 0x37, 0x28, 0x78, 0xcf,
            0x33, 0x6d, 0x16, 0xc2, 0xb2, 0x54, 0x5e, 0x19, 0x57, 0xd5, 0x80, 0x81, 0x9e, 0xd9,
            0x9a, 0x87, 0xad, 0x5e, 0x0b, 0x47, 0x06, 0x46, 0xbe, 0x9a, 0x7e, 0xc8, 0x33, 0xe0,
            0xde, 0x08, 0x7d, 0xb3, 0xdd, 0x4c, 0xbb, 0x29, 0x45, 0x27, 0xdd, 0x1e, 0x86, 0xdc,
            0xac, 0xec, 0x0a, 0x13, 0x71, 0xa4, 0xfe, 0x82, 0x37, 0xa9, 0xf6, 0x65, 0xce, 0xc3,
            0xf8, 0xe8, 0xa0, 0xa5, 0x36, 0x82, 0x37, 0x55, 0xfa, 0x98,
        ];
        let pkx = Pkm::new(shiny_ekx);
        assert_eq!(pkx.is_shiny(), true);
        assert_eq!(pkx.shiny_type(), Some(types::Shiny::Square));
    }
}
